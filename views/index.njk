<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta http-equiv="X-UA-Compatible" content="ie=edge" />
    <script src="https://unpkg.com/axios/dist/axios.min.js"></script>
    <title>Delay</title>
  </head>
  <body>
    <div
      id="box"
      style="height: 100px; width: 100px; background: red;color: white"
    >
      synced
    </div>
    <br />
    <div
      id="unsyncedBox"
      style="height: 100px; width: 100px; background: red;color: white"
    >
      unsynced
    </div>
    <div>Real Time difference: <span id="delay"></span></div>
    <button onclick="getAverageDelta()">Get Delay</button>
    <br />
    <div id="player"></div>
    <br />
    <div style="max-height:80vh; overflow:auto">
      <div id="ping"></div>
    </div>
  </body>
  <script src="js/main.js"></script>
  <script>
    // 2. This code loads the IFrame Player API code asynchronously.
    var tag = document.createElement("script");

    tag.src = "https://www.youtube.com/iframe_api";
    var firstScriptTag = document.getElementsByTagName("script")[0];
    firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

    // 3. This function creates an <iframe> (and YouTube player)
    //    after the API code downloads.
    var player;
    async function onYouTubeIframeAPIReady() {
      await getAverageDelta();

      player = new YT.Player("player", {
        height: "390",
        width: "640",
        playerVars: {
          controls: 0,
          start: startPos
        },
        videoId: "{{videoId}}",
        events: {
          onReady: onPlayerReady,
          onStateChange: onPlayerStateChange
        }
      });
      window.player = player;
    }

    // 4. The API will call this function when the video player is ready.
    async function onPlayerReady(event) {
      console.log("sdfasdf", startTime - getServerTime());
      player.playVideo();
      setTimeout(() => {
        player.seekTo(startPos + 1);
        player.pauseVideo();
      }, 1000);
      // player.pauseVideo();
      setTimeout(() => {
        player.playVideo();
        console.log("start", startPos, getServerTime());
      }, startTime - getServerTime());
    }

    // 5. The API calls this function when the player's state changes.
    //    The function indicates that when playing a video (state=1),
    //    the player should play for six seconds and then stop.
    var done = false;
    function onPlayerStateChange(event) {
      if (event.data == YT.PlayerState.ENDED) {
        player.playVideo();
      }
      if (event.data == -1) {
      }
    }
    function stopVideo() {
      player.stopVideo();
    }
  </script>
</html>
